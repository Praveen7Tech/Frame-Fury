<%- include("../../views/partials/admin/header") %>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 mt-60">
            <form method="post" action="/admin/editcategory/<%=category._id%>" id="editCategoryForm">
                <div class="d-flex justify-content-between mt-30">
                    <!-- Back Button -->
                    <button class="btn btn-secondary" type="button" onclick="goBack()">Go Back</button>
                    
                    <!-- Update Button -->
                    <button class="btn btn-primary" type="submit">Update Category</button>
                </div>
                
                <div class="mb-4 mt-30">
                    <label for="product_name" class="form-label">Name</label>
                    <input type="text" name="categoryName" value="<%=category.name%>" class="form-control border" id="categoryName" />
                    <div id="nameError" class="text-danger mt-1" style="display: none;"></div>
                </div>
            
                <div class="mb-4">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control border" id="categoryDescription"><%=category.description%></textarea>
                    <div id="descriptionError" class="text-danger mt-1" style="display: none;"></div>
                </div>
            </form>
        </div>
    </div>
</div>

  
<%- include("../../views/partials/admin/footer") %>
   
    <!-- navigation to go back -->
    <script>
        function goBack() {
            window.history.back();
        }
    </script>


    <script>
        const form = document.getElementById('editCategoryForm');
    
        form.addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent the default form submission
    
            const formData = new FormData(form);
            const formObject = Object.fromEntries(formData.entries()); // Convert to an object
            const actionUrl = form.getAttribute('action'); // Get the action URL
    
            // Validation
            let isValid = true;
    
            // Get input fields and error divs
            const nameInput = document.getElementById('categoryName');
            const descriptionInput = document.getElementById('categoryDescription');
            const nameError = document.getElementById('nameError');
            const descriptionError = document.getElementById('descriptionError');
    
            // Clear previous error messages
            nameError.style.display = 'none';
            nameError.textContent = '';
            descriptionError.style.display = 'none';
            descriptionError.textContent = '';
    
            // Validate name
            if (!formObject.categoryName || formObject.categoryName.trim().length < 3) {
                nameError.style.display = 'block';
                nameError.textContent = 'Category name is required, and it must be at least 3 characters long.';
                isValid = false;
            }
    
            // Validate description
            if (!formObject.description || formObject.description.trim().length < 5) {
                descriptionError.style.display = 'block';
                descriptionError.textContent = 'Description is required, and it must be at least 5 characters long.';
                isValid = false;
            }
    
            // If validation fails, stop the form submission
            if (!isValid) {
                return;
            }
    
            try {
                const response = await fetch(actionUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formObject)
                });
    
                const result = await response.json();
    
                if (response.status === 200) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: result.message
                    }).then(() => {
                        window.location.href = document.referrer; // Go back to the previous page after success
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: result.error || 'An unknown error occurred.'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong. Please try again later.'
                });
            }
        });
    </script>