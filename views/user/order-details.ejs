<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="shortcut icon" type="image/x-icon" href="assets/imgs/theme/ecom-logo.jpg">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        .order-status {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .product-image {
            max-width: 100px;
            height: auto;
        }

        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .table th {
            background-color: #f8f9fa;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .page-header {
            background-color: #f8f9fa;
            padding: 15px 0;
            margin-bottom: 20px;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
            padding-top: 50px;
        }

        .container1 {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
            padding-top: 50px;
        }

        .breadcrumb {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            flex-wrap: wrap;
        }

        .breadcrumb li {
            display: flex;
            align-items: center;
        }

        .breadcrumb a {
            color: #007bff;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .breadcrumb a:hover {
            color: #0056b3;
            text-decoration: underline;
        }

        .breadcrumb li:not(:last-child)::after {
            content: "›";
            margin: 0 10px;
            color: #6c757d;
        }

        .breadcrumb li:last-child {
            color: #6c757d;
        }

        .back-arrow {
            display: flex;
            align-items: center;
            font-size: 16px;
            color: #0d0d0d;
            text-decoration: none;
            font-weight: bold;
            transition: color 0.3s ease;
        }

        .back-arrow:hover {
            color: #c53f0f;
            text-decoration: none;
        }

        .back-arrow::before {
            content: "←";
            /* Adds the back arrow */
            margin-right: 8px;
            font-size: 18px;
            color: inherit;
        }

        .repay-btn {
            background-color: #3399cc;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .repay-btn:hover {
            background-color: #287ba3;
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .repay-btn:active {
            background-color: #1a5d7c;
            box-shadow: none;
            transform: translateY(0);
        }
    </style>
</head>

<body>
    <div class="container1">
        <div class="page-header breadcrumb-wrap">
            <div class="container1">
                <a href="/userProfile" rel="nofollow" class="back-arrow"> Back To Orders List
                </a>
            </div>
        </div>
    </div>



    <div class="container mt-5">
        <div class="row mb-4">
            <div class="col-md-6">
                <h1>Order Details</h1>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-primary invcBtn" onclick="InvoiceDownload()">Invoice</button>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-header">
                <h2 class="card-title h5 mb-0">Order Summary</h2>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Order Number:</strong>
                            <%=order.orderId%>
                        </p>
                        <p><strong>Order Date:</strong>
                            <%=new Date(order.createdAt).toLocaleString()%>
                        </p>
                        <p><strong>Customer Name:</strong>
                            <%=user.name%>
                        </p>
                        <p class="order-status">Order Status: <span
                                class="badge bg-<%= order.orderStatus === 'Cancelled' ? 'danger' : 'success' %> orderStatus">
                                <%=order.orderStatus%>
                            </span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Total Amount:</strong> ₹ <%=order.total.toFixed(2)%>
                        </p>
                        <p><strong>Payment Method:</strong>
                            <%=order.paymentMethod%>
                        </p>
                        <p class="order-status"><strong>Payment Status:</strong>
                            <span class="badge bg-danger">
                                <%=order.paymentStatus%>
                            </span>
                        </p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <%if(order.orderStatus !=="Cancelled" && order.orderStatus !=="Deliverd" && order.orderStatus
                            !=="Returned" && order.paymentStatus !=="Failed" ){%>
                            <button type="button" id="cancelOrderButton" class="btn btn-danger">
                                Cancel Order
                            </button>
                            <%}else if(order.orderStatus==="Deliverd" ){%>
                                <button id="returnOrderButton" type="button" class="btn btn-warning">
                                    Return Order
                                </button>
                                <%}else if(order.paymentStatus === "Failed"){%>
                                    <button class="repay-btn" id="RePay"
                                     onclick="RepayFailedOrder('<%= order._id %>', '<%= order.total %>', '<%= order.paymentMethod %>', <%= JSON.stringify(order.address) %>, '<%= order.couponCode %>', '<%= order.deliveryMethod %>')">RePay</button>
                                 <%}%>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h2 class="card-title h5 mb-0">Product Details</h2>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% order.items.forEach(item=> { %>
                                <tr>
                                    <td>
                                        <img src="/uploads/re-image/<%=item.productId.productImage[0]%>"
                                            alt="<%=item.productId.productName%>" class="product-image">
                                    </td>
                                    <td>
                                        <%=item.productId.productName%>
                                    </td>
                                    <td>₹ <%=item.price.toFixed(2)%>
                                    </td>
                                    <td>
                                        <%=item.quantity%>
                                    </td>
                                    <td>₹ <%=(item.price * item.quantity).toFixed(2)%>
                                    </td>
                                </tr>
                                <%})%>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h2 class="card-title h5 mb-0">Shipping Information</h2>
                    </div>
                    <div class="card-body">
                        <p><strong>Name:</strong>
                            <%=order.address.name%>
                        </p>
                        <p><strong>Address:</strong>
                            <%=order.address.landMark%>
                        </p>
                        <p><strong>City:</strong>
                            <%=order.address.city%>
                        </p>
                        <p><strong>State:</strong>
                            <%=order.address.state%>
                        </p>
                        <p><strong>Zip Code:</strong>
                            <%=order.address.pincode%>
                        </p>
                        <p><strong>Country:</strong> India</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h2 class="card-title h5 mb-0">Payment Details</h2>
                    </div>
                    <div class="card-body">
                        <p><strong>Payment Method:</strong>
                            <%=order.paymentMethod%>
                        </p>
                        <p><strong>Subtotal:</strong> ₹ <%=order.subTotal.toFixed(2)%>
                        </p>
                        <p><strong>Shipping:</strong> ₹ <%=order.deliveryCharge.toFixed(2)%>
                        </p>
                        <p><strong>Coupon:</strong> ₹ <%= order.couponDiscount%>
                        </p>
                        <hr>
                        <p><strong>Total:</strong> ₹ <%=order.total.toFixed(2)%>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <!-- Invoice download libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>

        // cancel order function
        document.getElementById("cancelOrderButton")?.addEventListener("click", function () {
            Swal.fire({
                icon: "warning",
                title: "Are you sure?",
                text: "Please Provide a Reason for this order Cancellation.",
                input: "text",
                inputPlaceholder: "Enter Your Reason",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Cancel Order",
                inputValidator: (value) => {
                    if (!value) {
                        return "You need to Provide A reason before cancelling."
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const cancelReason = result.value
                    cancelOrder(cancelReason);
                }
            });
        });

        function cancelOrder(cancelReason) {
            const url = "/orderCancel/<%=order._id%>";

            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ cancelReason })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: data.message,
                            text: `Order <%=order._id%> has been cancelled.`,
                            confirmButtonText: 'OK'
                        })
                            .then(() => {
                                const orderStatusElement = document.querySelector(".orderStatus");
                                if (orderStatusElement) {
                                    orderStatusElement.textContent = "Cancelled";
                                    orderStatusElement.classList.remove("bg-success");
                                    orderStatusElement.classList.add("bg-danger");
                                }
                                const cancelOrderButton = document.querySelector("#cancelOrderButton");
                                if (cancelOrderButton) {
                                    cancelOrderButton.disabled = true;
                                }
                            });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error!",
                            text: data.message,
                            confirmButtonText: "OK"
                        });
                    }
                }).catch(error => {
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while cancelling the order.',
                        icon: 'error',
                        confirmButtonText: 'Try Again'
                    });
                });
        }


        // Return Order function
        document.getElementById("returnOrderButton")?.addEventListener("click", function () {
            Swal.fire({
                title: "Return Order",
                text: "Are You Sure.? Please provide a Reason for Returning this Order..!",
                input: "text",
                inputPlaceholder: "Enter Your Reason",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, proceed",
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                inputValidator: (value) => {
                    if (!value) {
                        return "You Must need to provide a Reason for Return this order..!"
                    }
                }
            })
                .then((result) => {
                    if (result.isConfirmed) {
                        returnOrder();
                    }
                });
        });

        function returnOrder() {
            fetch("/ReturnOrder/<%= order._id%>", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire("Return Request Success", "Order return has been successful. Our executive will collect the product.", "success");

                        const orderStatusPlace = document.querySelector(".orderStatus");
                        if (orderStatusPlace) {
                            orderStatusPlace.textContent = "Returned";
                            orderStatusPlace.classList.remove("bg-success");
                            orderStatusPlace.classList.add("bg-warning");
                        }

                        const returnOrderButton = document.querySelector("#returnOrderButton");
                        if (returnOrderButton) {
                            returnOrderButton.disabled = true;
                        }
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: data.message,
                            icon: "error",
                            confirmButtonText: "OK"
                        });
                    }
                })
                .catch(error => {
                    Swal.fire("Error!", "An error occurred in order cancellation!", "error");
                });
        }


        // Invoice Download function

        async function InvoiceDownload() {
    // Select the container element
    const invoiceElement = document.querySelector('.container');

    // Change the title temporarily
    const title = document.querySelector('h1');
    const originalTitle = title.textContent;
    title.textContent = "Order Invoice";

    // Hide unnecessary elements
    const elementsToHide = document.querySelectorAll('.btn-primary, #cancelOrderButton, #returnOrderButton, #RePay');
    elementsToHide.forEach(el => el.style.display = 'none');

    // Use html2canvas with scaling for high quality
    const canvas = await html2canvas(invoiceElement, {
        scale: 3, // Increases resolution
        useCORS: true, // Allows cross-origin images
        allowTaint: true // Ensures no issues with tainted canvas
    });

    // Convert canvas to image
    const imgData = canvas.toDataURL('image/png');

    // Dimensions for PDF
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio
    let heightLeft = imgHeight;

    // Initialize jsPDF
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p', 'mm', 'a4');
    let position = 0;

    // Add the content as multiple pages if needed
    while (heightLeft > 0) {
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
        if (heightLeft > 0) {
            position = position - pageHeight; // Move to next page
            pdf.addPage();
        }
    }

    // Restore hidden elements
    elementsToHide.forEach(el => el.style.display = '');

    // Restore title
    title.textContent = originalTitle;

    // Download the PDF
    pdf.save('Invoice.pdf');
}


    </script>


<script>
    async function RepayFailedOrder(orderId, totalAmount, paymentMethod, selectedAddress, couponCode, deliveryMethod) {
        console.log("id", orderId, "amt", totalAmount, "pay", paymentMethod, "add", selectedAddress, "coup", couponCode, "del", deliveryMethod)
        try {

            console.log("aap", orderId)
            const id = orderId

            const response = await fetch("/placeOrderRazorPay", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ totalAmount, orderId }),
            });

            const data = await response.json();
            console.log("data:", data);

            if (data.success) {
                const { orderId, amount, currency, key } = data;

                const options = {
                    key,
                    amount,
                    currency,
                    name: "Frame Fury",
                    description: "Order Payment",
                    order_id: orderId,
                    handler: async function (response) {
                        console.log("rz response ", response);

                        const paymentId = response.razorpay_payment_id;
                        const razorpaySignature = response.razorpay_signature;
                        const orderId = response.razorpay_order_id;


                        const verifyResponse = await fetch("/verifyRazorPayOrder", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                selectedAddress, paymentMethod, deliveryMethod, couponCode,
                                orderId,
                                paymentId,
                                razorpaySignature,
                                id: id ? id : null
                            }),
                        });

                        const verifyData = await verifyResponse.json();
                        console.log("verify:", verifyData);

                        if (verifyData.success) {
                            Swal.fire({
                                title: "Payment Success",
                                text: `Order RePaid Successfully. Your OrderId is: ${verifyData.orderId}`,
                                icon: "success",
                                confirmButtonText: "OK",
                            }).then(() => window.location.reload());
                        } else {
                            Swal.fire({
                                icon: "error",
                                title: "Payment Failed",
                                text: "Payment verification failed. Please try again.",
                                confirmButtonText: "OK",
                            });
                        }
                    },
                    theme: { color: "#3399cc" },
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: data.message,
                    confirmButtonText: "OK",
                });
            }
        } catch (error) {
            console.error("RePay Error:", error);
        }
    }

</script>